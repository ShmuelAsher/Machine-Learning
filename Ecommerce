#in this analysis we arre trying to find out 

#Import Libraries 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline #relevent if running in Jupyter notebook

#loading 
ecomm = pd.read_csv('Ecommerce Customers.csv')  #Loading the dataset
ecomm.head() #looking at the top of the dataset 
ecomm.info() #getting info on the structure and data types in the dataset 
ecomm.describe() #getting stats on the data types in the dataset 

#exploratory data analysis (EDA)
#using a regression plot to visualise Time on Website and Yearly Amount Spent corrlation 
sns.regplot(x='Time on Website',y='Yearly Amount Spent',data=ecomm,color='gray')  
#using pairplot on the whole datast (numarical values only) in order to look for relationships 
sns.pairplot(ecomm)

#results have shown relationships with Yearly Amount Spent and Length of Membership
#plotting linear model plot in order to see corrlations (plot is presenting positive linear correlation) 
sns.set_style(style='whitegrid')
sns.lmplot(x='Yearly Amount Spent',y='Length of Membership',data=ecomm)

#training and testing the dataset
ecomm.columns
#assigning all numarical features of the customers to X (independent variables)
X = ecomm[['Avg. Session Length', 'Time on App',
       'Time on Website', 'Length of Membership']]
#assigning Yearly Amount Spent to y (dependent variable)
y = ecomm['Yearly Amount Spent']
#importing train_test_split in order to split the dataset 
from sklearn.model_selection import train_test_split
#testsize set to 0.3 (30% of the dataset) with 101 random_state
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

#training the model
#importing te Linear Regression model
from sklearn.linear_model import LinearRegression
#creating an object that will contain the training model 
lm = LinearRegression()
#training the model 
lm.fit(X_train,y_train)

#saving and presetning the coefficients of the model
coeff_df = pd.DataFrame(lm.coef_,X.columns,columns=['Coefficient'])
coeff_df

#predicting using test dataset
predictions = lm.predict(X_test)
#creating a scatterplot of  real test values vs. predicted values
sns.set_style(style='whitegrid')
sns.scatterplot(y_test,predictions)
plt.xlabel('Y Test - True Values')
plt.ylabel('Predicted Values')

#evaluating the model
#calculating he errors = MAE, MSE, RMSE
from sklearn import metrics
MAE = ('MAE:',metrics.mean_absolute_error(y_test,predictions))
MSE = ('MSE:',metrics.mean_squared_error(y_test,predictions))
RMSE = ('RMSE:',np.sqrt(metrics.mean_absolute_error(y_test,predictions)))
metrics.explained_variance_score(y_test,predictions)

#residuals
#plotting the residuals in order to see if they normally distributed
sns.distplot((y_test-predictions),bins=50)

#conclusion
#the Time on App coefficient is 38.59 while Time on Website is only 0.19.
#this means that people prefer to use the mobile app to place orders
#the company can decide to improve their website in order to increase web purchases
#or to improve more the app in order to maximise app based sales 

#The End!






